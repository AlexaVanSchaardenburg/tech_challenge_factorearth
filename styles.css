*{
  font-family: 'Roboto', sans-serif;
}

body{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: #394880;
}

.page-header{
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 1em;
}

.title{
  text-align: center;
  color: white;
}

.header-img{
  width: 10em;
}

.box{
  background: white;
  width: 10em;
  height: 10em;
  color: #394880;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* I used the grid-template-columns CSS property for this challenge, in past projects I used the flex-wrap  property to create grids. However, becasue this grid had specific dimensions (2x2) I found the grid-template-columns property to be easier to work with for this challenge and I liked how much direct control it gave me over how I displayed the boxes. */
.boxes{
  display: grid;
  grid-template-columns: 10em 10em;
  gap: 0.5em;
}

@media screen and (max-width: 500px){
  .boxes{
    grid-template-columns: 10em;
  }
}

/* This secondary media query may be unneeded becasue no phone screens are this narrow. However I still created it to demo how I would handle needing multiple media queries and to handle the edge case of a user making a very narrow window on a desktop. Now the page's elements are all fully visible with only a vertical scroll down to a screen width of 100px. */
@media screen and (max-width: 230px){
  .title{
    font-size: 1em;
  }

  .header-img{
    width: 5em;
  }
  
  .box{
    width: 5em;
    height: 5em;
  }
  .boxes{
    grid-template-columns: 5em;
  }
}